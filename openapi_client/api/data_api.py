# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictInt, StrictStr
from typing import Optional
from openapi_client.models.service_docs_call_daily_summary import ServiceDocsCallDailySummary
from openapi_client.models.service_docs_call_detail import ServiceDocsCallDetail
from openapi_client.models.service_docs_call_monthly_summary import ServiceDocsCallMonthlySummary
from openapi_client.models.service_docs_endpoint_list import ServiceDocsEndpointList
from openapi_client.models.service_docs_event_daily_summary import ServiceDocsEventDailySummary
from openapi_client.models.service_docs_event_detail import ServiceDocsEventDetail
from openapi_client.models.service_docs_event_monthly_summary import ServiceDocsEventMonthlySummary
from openapi_client.models.service_docs_feature_daily_summary import ServiceDocsFeatureDailySummary
from openapi_client.models.service_docs_feature_monthly_summary import ServiceDocsFeatureMonthlySummary

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v1_data_call_daily_summary_get(
        self,
        account_id: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsCallDailySummary:
        """Get Call Daily Summary List

        Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.

        :param account_id:
        :type account_id: str
        :param call_type:
        :type call_type: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_daily_summary_get_serialize(
            account_id=account_id,
            call_type=call_type,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_call_daily_summary_get_with_http_info(
        self,
        account_id: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsCallDailySummary]:
        """Get Call Daily Summary List

        Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.

        :param account_id:
        :type account_id: str
        :param call_type:
        :type call_type: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_daily_summary_get_serialize(
            account_id=account_id,
            call_type=call_type,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_call_daily_summary_get_without_preload_content(
        self,
        account_id: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Call Daily Summary List

        Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.

        :param account_id:
        :type account_id: str
        :param call_type:
        :type call_type: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_daily_summary_get_serialize(
            account_id=account_id,
            call_type=call_type,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_call_daily_summary_get_serialize(
        self,
        account_id,
        call_type,
        end_date,
        page_size,
        start_date,
        start_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if call_type is not None:
            
            _query_params.append(('call_type', call_type))
            
        if end_date is not None:
            
            _query_params.append(('end_date', end_date))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_date is not None:
            
            _query_params.append(('start_date', start_date))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/call_daily_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_call_detail_get(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        callee_name: Optional[StrictStr] = None,
        callee_number: Optional[StrictStr] = None,
        caller_name: Optional[StrictStr] = None,
        caller_number: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsCallDetail:
        """Get Call Detail List

        Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param callee_name:
        :type callee_name: str
        :param callee_number:
        :type callee_number: str
        :param caller_name:
        :type caller_name: str
        :param caller_number:
        :type caller_number: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_detail_get_serialize(
            account=account,
            call_type=call_type,
            callee_name=callee_name,
            callee_number=callee_number,
            caller_name=caller_name,
            caller_number=caller_number,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_call_detail_get_with_http_info(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        callee_name: Optional[StrictStr] = None,
        callee_number: Optional[StrictStr] = None,
        caller_name: Optional[StrictStr] = None,
        caller_number: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsCallDetail]:
        """Get Call Detail List

        Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param callee_name:
        :type callee_name: str
        :param callee_number:
        :type callee_number: str
        :param caller_name:
        :type caller_name: str
        :param caller_number:
        :type caller_number: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_detail_get_serialize(
            account=account,
            call_type=call_type,
            callee_name=callee_name,
            callee_number=callee_number,
            caller_name=caller_name,
            caller_number=caller_number,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_call_detail_get_without_preload_content(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        callee_name: Optional[StrictStr] = None,
        callee_number: Optional[StrictStr] = None,
        caller_name: Optional[StrictStr] = None,
        caller_number: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Call Detail List

        Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param callee_name:
        :type callee_name: str
        :param callee_number:
        :type callee_number: str
        :param caller_name:
        :type caller_name: str
        :param caller_number:
        :type caller_number: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_detail_get_serialize(
            account=account,
            call_type=call_type,
            callee_name=callee_name,
            callee_number=callee_number,
            caller_name=caller_name,
            caller_number=caller_number,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_call_detail_get_serialize(
        self,
        account,
        call_type,
        callee_name,
        callee_number,
        caller_name,
        caller_number,
        end_date,
        page_size,
        start_date,
        start_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account is not None:
            
            _query_params.append(('account', account))
            
        if call_type is not None:
            
            _query_params.append(('call_type', call_type))
            
        if callee_name is not None:
            
            _query_params.append(('callee_name', callee_name))
            
        if callee_number is not None:
            
            _query_params.append(('callee_number', callee_number))
            
        if caller_name is not None:
            
            _query_params.append(('caller_name', caller_name))
            
        if caller_number is not None:
            
            _query_params.append(('caller_number', caller_number))
            
        if end_date is not None:
            
            _query_params.append(('end_date', end_date))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_date is not None:
            
            _query_params.append(('start_date', start_date))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/call_detail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_call_monthly_summary_get(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsCallMonthlySummary:
        """Get Call Detail List

        Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_monthly_summary_get_serialize(
            account=account,
            call_type=call_type,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_call_monthly_summary_get_with_http_info(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsCallMonthlySummary]:
        """Get Call Detail List

        Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_monthly_summary_get_serialize(
            account=account,
            call_type=call_type,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_call_monthly_summary_get_without_preload_content(
        self,
        account: Optional[StrictStr] = None,
        call_type: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Call Detail List

        Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.

        :param account:
        :type account: str
        :param call_type:
        :type call_type: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_call_monthly_summary_get_serialize(
            account=account,
            call_type=call_type,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsCallMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_call_monthly_summary_get_serialize(
        self,
        account,
        call_type,
        end_month,
        end_year,
        page_size,
        start_key,
        start_month,
        start_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account is not None:
            
            _query_params.append(('account', account))
            
        if call_type is not None:
            
            _query_params.append(('call_type', call_type))
            
        if end_month is not None:
            
            _query_params.append(('end_month', end_month))
            
        if end_year is not None:
            
            _query_params.append(('end_year', end_year))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        if start_month is not None:
            
            _query_params.append(('start_month', start_month))
            
        if start_year is not None:
            
            _query_params.append(('start_year', start_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/call_monthly_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_endpoint_list_get(
        self,
        endpoint_name: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        transaction_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsEndpointList:
        """Get Endpoint List

        Access the endpoint list for each CPaaS API.

        :param endpoint_name:
        :type endpoint_name: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param transaction_type:
        :type transaction_type: str
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_endpoint_list_get_serialize(
            endpoint_name=endpoint_name,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            transaction_type=transaction_type,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEndpointList",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_endpoint_list_get_with_http_info(
        self,
        endpoint_name: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        transaction_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsEndpointList]:
        """Get Endpoint List

        Access the endpoint list for each CPaaS API.

        :param endpoint_name:
        :type endpoint_name: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param transaction_type:
        :type transaction_type: str
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_endpoint_list_get_serialize(
            endpoint_name=endpoint_name,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            transaction_type=transaction_type,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEndpointList",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_endpoint_list_get_without_preload_content(
        self,
        endpoint_name: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        transaction_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Endpoint List

        Access the endpoint list for each CPaaS API.

        :param endpoint_name:
        :type endpoint_name: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param transaction_type:
        :type transaction_type: str
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_endpoint_list_get_serialize(
            endpoint_name=endpoint_name,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            transaction_type=transaction_type,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEndpointList",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_endpoint_list_get_serialize(
        self,
        endpoint_name,
        feature_name,
        page_size,
        start_key,
        transaction_type,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if endpoint_name is not None:
            
            _query_params.append(('endpoint_name', endpoint_name))
            
        if feature_name is not None:
            
            _query_params.append(('feature_name', feature_name))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        if transaction_type is not None:
            
            _query_params.append(('transaction_type', transaction_type))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/endpoint_list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_event_daily_summary_get(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsEventDailySummary:
        """Get Event Daily Summary List

        Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_daily_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_event_daily_summary_get_with_http_info(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsEventDailySummary]:
        """Get Event Daily Summary List

        Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_daily_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_event_daily_summary_get_without_preload_content(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Event Daily Summary List

        Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date:
        :type end_date: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_daily_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_date=end_date,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_event_daily_summary_get_serialize(
        self,
        account_id,
        component,
        end_date,
        page_size,
        start_date,
        start_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if component is not None:
            
            _query_params.append(('component', component))
            
        if end_date is not None:
            
            _query_params.append(('end_date', end_date))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_date is not None:
            
            _query_params.append(('start_date', start_date))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/event_daily_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_event_detail_get(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date_time: Optional[StrictStr] = None,
        event_name: Optional[StrictStr] = None,
        exec_status: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date_time: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        username: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsEventDetail:
        """Get Event Details

        Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date_time:
        :type end_date_time: str
        :param event_name:
        :type event_name: str
        :param exec_status:
        :type exec_status: str
        :param page_size:
        :type page_size: int
        :param start_date_time:
        :type start_date_time: str
        :param start_key:
        :type start_key: str
        :param username:
        :type username: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_detail_get_serialize(
            account_id=account_id,
            component=component,
            end_date_time=end_date_time,
            event_name=event_name,
            exec_status=exec_status,
            page_size=page_size,
            start_date_time=start_date_time,
            start_key=start_key,
            username=username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_event_detail_get_with_http_info(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date_time: Optional[StrictStr] = None,
        event_name: Optional[StrictStr] = None,
        exec_status: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date_time: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        username: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsEventDetail]:
        """Get Event Details

        Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date_time:
        :type end_date_time: str
        :param event_name:
        :type event_name: str
        :param exec_status:
        :type exec_status: str
        :param page_size:
        :type page_size: int
        :param start_date_time:
        :type start_date_time: str
        :param start_key:
        :type start_key: str
        :param username:
        :type username: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_detail_get_serialize(
            account_id=account_id,
            component=component,
            end_date_time=end_date_time,
            event_name=event_name,
            exec_status=exec_status,
            page_size=page_size,
            start_date_time=start_date_time,
            start_key=start_key,
            username=username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_event_detail_get_without_preload_content(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_date_time: Optional[StrictStr] = None,
        event_name: Optional[StrictStr] = None,
        exec_status: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date_time: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        username: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Event Details

        Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_date_time:
        :type end_date_time: str
        :param event_name:
        :type event_name: str
        :param exec_status:
        :type exec_status: str
        :param page_size:
        :type page_size: int
        :param start_date_time:
        :type start_date_time: str
        :param start_key:
        :type start_key: str
        :param username:
        :type username: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_detail_get_serialize(
            account_id=account_id,
            component=component,
            end_date_time=end_date_time,
            event_name=event_name,
            exec_status=exec_status,
            page_size=page_size,
            start_date_time=start_date_time,
            start_key=start_key,
            username=username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventDetail",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_event_detail_get_serialize(
        self,
        account_id,
        component,
        end_date_time,
        event_name,
        exec_status,
        page_size,
        start_date_time,
        start_key,
        username,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if component is not None:
            
            _query_params.append(('component', component))
            
        if end_date_time is not None:
            
            _query_params.append(('end_date_time', end_date_time))
            
        if event_name is not None:
            
            _query_params.append(('event_name', event_name))
            
        if exec_status is not None:
            
            _query_params.append(('exec_status', exec_status))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_date_time is not None:
            
            _query_params.append(('start_date_time', start_date_time))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/event_detail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_event_monthly_summary_get(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsEventMonthlySummary:
        """Get Event Monthly Summary List

        Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_monthly_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_event_monthly_summary_get_with_http_info(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsEventMonthlySummary]:
        """Get Event Monthly Summary List

        Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_monthly_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_event_monthly_summary_get_without_preload_content(
        self,
        account_id: Optional[StrictStr] = None,
        component: Optional[StrictStr] = None,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Event Monthly Summary List

        Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).

        :param account_id:
        :type account_id: str
        :param component:
        :type component: str
        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_event_monthly_summary_get_serialize(
            account_id=account_id,
            component=component,
            end_month=end_month,
            end_year=end_year,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsEventMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_event_monthly_summary_get_serialize(
        self,
        account_id,
        component,
        end_month,
        end_year,
        page_size,
        start_key,
        start_month,
        start_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if component is not None:
            
            _query_params.append(('component', component))
            
        if end_month is not None:
            
            _query_params.append(('end_month', end_month))
            
        if end_year is not None:
            
            _query_params.append(('end_year', end_year))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        if start_month is not None:
            
            _query_params.append(('start_month', start_month))
            
        if start_year is not None:
            
            _query_params.append(('start_year', start_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/event_monthly_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_feature_daily_summary_get(
        self,
        end_date: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsFeatureDailySummary:
        """Get Feature Daily Summary List

        Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.

        :param end_date:
        :type end_date: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_daily_summary_get_serialize(
            end_date=end_date,
            feature_name=feature_name,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_feature_daily_summary_get_with_http_info(
        self,
        end_date: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsFeatureDailySummary]:
        """Get Feature Daily Summary List

        Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.

        :param end_date:
        :type end_date: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_daily_summary_get_serialize(
            end_date=end_date,
            feature_name=feature_name,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_feature_daily_summary_get_without_preload_content(
        self,
        end_date: Optional[StrictStr] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_date: Optional[StrictStr] = None,
        start_key: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Feature Daily Summary List

        Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.

        :param end_date:
        :type end_date: str
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_date:
        :type start_date: str
        :param start_key:
        :type start_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_daily_summary_get_serialize(
            end_date=end_date,
            feature_name=feature_name,
            page_size=page_size,
            start_date=start_date,
            start_key=start_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureDailySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_feature_daily_summary_get_serialize(
        self,
        end_date,
        feature_name,
        page_size,
        start_date,
        start_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if end_date is not None:
            
            _query_params.append(('end_date', end_date))
            
        if feature_name is not None:
            
            _query_params.append(('feature_name', feature_name))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_date is not None:
            
            _query_params.append(('start_date', start_date))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/feature_daily_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_data_feature_monthly_summary_get(
        self,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceDocsFeatureMonthlySummary:
        """Get Feature Monthly Summary List

        Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.

        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_monthly_summary_get_serialize(
            end_month=end_month,
            end_year=end_year,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_data_feature_monthly_summary_get_with_http_info(
        self,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceDocsFeatureMonthlySummary]:
        """Get Feature Monthly Summary List

        Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.

        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_monthly_summary_get_serialize(
            end_month=end_month,
            end_year=end_year,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_data_feature_monthly_summary_get_without_preload_content(
        self,
        end_month: Optional[StrictInt] = None,
        end_year: Optional[StrictInt] = None,
        feature_name: Optional[StrictStr] = None,
        page_size: Optional[StrictInt] = None,
        start_key: Optional[StrictStr] = None,
        start_month: Optional[StrictInt] = None,
        start_year: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Feature Monthly Summary List

        Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.

        :param end_month:
        :type end_month: int
        :param end_year:
        :type end_year: int
        :param feature_name:
        :type feature_name: str
        :param page_size:
        :type page_size: int
        :param start_key:
        :type start_key: str
        :param start_month:
        :type start_month: int
        :param start_year:
        :type start_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_data_feature_monthly_summary_get_serialize(
            end_month=end_month,
            end_year=end_year,
            feature_name=feature_name,
            page_size=page_size,
            start_key=start_key,
            start_month=start_month,
            start_year=start_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceDocsFeatureMonthlySummary",
            '400': "CPAASError",
            '404': "CPAASError",
            '500': "CPAASError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_data_feature_monthly_summary_get_serialize(
        self,
        end_month,
        end_year,
        feature_name,
        page_size,
        start_key,
        start_month,
        start_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if end_month is not None:
            
            _query_params.append(('end_month', end_month))
            
        if end_year is not None:
            
            _query_params.append(('end_year', end_year))
            
        if feature_name is not None:
            
            _query_params.append(('feature_name', feature_name))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if start_key is not None:
            
            _query_params.append(('start_key', start_key))
            
        if start_month is not None:
            
            _query_params.append(('start_month', start_month))
            
        if start_year is not None:
            
            _query_params.append(('start_year', start_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/data/feature_monthly_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


