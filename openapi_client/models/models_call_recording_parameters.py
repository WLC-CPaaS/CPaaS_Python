# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ModelsCallRecordingParameters(BaseModel):
    """
    ModelsCallRecordingParameters
    """ # noqa: E501
    enabled: Optional[StrictBool] = None
    format: Optional[StrictStr] = None
    record_min_sec: Optional[StrictInt] = None
    record_on_answer: Optional[StrictBool] = None
    record_on_bridge: Optional[StrictBool] = None
    record_sample_rate: Optional[StrictInt] = None
    time_limit: Optional[Annotated[int, Field(le=10800, strict=True, ge=5)]] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["enabled", "format", "record_min_sec", "record_on_answer", "record_on_bridge", "record_sample_rate", "time_limit", "url"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['mp3', 'wav']):
            raise ValueError("must be one of enum values ('mp3', 'wav')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsCallRecordingParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsCallRecordingParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "format": obj.get("format"),
            "record_min_sec": obj.get("record_min_sec"),
            "record_on_answer": obj.get("record_on_answer"),
            "record_on_bridge": obj.get("record_on_bridge"),
            "record_sample_rate": obj.get("record_sample_rate"),
            "time_limit": obj.get("time_limit"),
            "url": obj.get("url")
        })
        return _obj


