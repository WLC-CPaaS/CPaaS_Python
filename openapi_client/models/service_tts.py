# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServiceTTS(BaseModel):
    """
    ServiceTTS
    """ # noqa: E501
    text: StrictStr
    voice: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["text", "voice"]

    @field_validator('voice')
    def voice_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['female/en-US', 'male/en-US', 'female/en-CA', 'female/en-AU', 'female/en-GB', 'male/en-GB', 'female/es-US', 'male/es-US', 'female/us-US', 'female/zh-CN', 'male/zh-CN', 'female/zh-HK', 'female/zh-TW', 'female/ja-JP', 'male/ja-JP', 'female/ko-KR', 'male/ko-KR', 'female/da-DK', 'female/de-DE', 'male/de-DE', 'female/ca-ES', 'female/es-ES', 'male/es-ES', 'female/fi-FI', 'female/fr-CA', 'male/fr-CA', 'female/fr-FR', 'male/fr-FR', 'female/it-IT', 'male/it-IT', 'female/nb-NO', 'female/nl-NL', 'female/pl-PL', 'female/pt-BR', 'female/pt-PT', 'male/pt-PT', 'female/ru-RU', 'male/ru-RU', 'female/sv-SE', 'female/hu-HU', 'female/cs-CZ', 'female/tr-TR', 'male/tr-TR', 'male/ru-RU/Vladimir', 'female/ru-RU/Julia', 'female/ru-RU/Anna', 'female/ru-RU/Viktoria', 'male/ru-RU/Alexander', 'female/ru-RU/Maria', 'female/ru-RU/Lidia', 'es-ES-Standard-A', 'it-IT-Standard-A', 'ja-JP-Standard-A', 'ko-KR-Standard-A', 'pt-BR-Standard-A', 'tr-TR-Standard-A', 'sv-SE-Standard-A', 'nl-NL-Standard-A', 'en-US-Wavenet-D', 'de-DE-Wavenet-A', 'de-DE-Wavenet-B', 'de-DE-Wavenet-C', 'de-DE-Wavenet-D', 'en-AU-Wavenet-A', 'en-AU-Wavenet-B', 'en-AU-Wavenet-C', 'en-AU-Wavenet-D', 'en-GB-Wavenet-A', 'en-GB-Wavenet-B', 'en-GB-Wavenet-C', 'en-GB-Wavenet-D', 'en-US-Wavenet-A', 'en-US-Wavenet-B', 'en-US-Wavenet-C', 'en-US-Wavenet-E', 'en-US-Wavenet-F', 'fr-FR-Wavenet-A', 'fr-FR-Wavenet-B', 'fr-FR-Wavenet-C', 'fr-FR-Wavenet-D', 'it-IT-Wavenet-A', 'ja-JP-Wavenet-A', 'nl-NL-Wavenet-A', 'en-GB-Standard-A', 'en-GB-Standard-B', 'en-GB-Standard-C', 'en-GB-Standard-D', 'en-US-Standard-B', 'en-US-Standard-C', 'en-US-Standard-D', 'en-US-Standard-E', 'de-DE-Standard-A', 'de-DE-Standard-B', 'en-AU-Standard-A', 'en-AU-Standard-B', 'en-AU-Standard-C', 'en-AU-Standard-D', 'fr-CA-Standard-A', 'fr-CA-Standard-B', 'fr-CA-Standard-C', 'fr-CA-Standard-D', 'fr-FR-Standard-A', 'fr-FR-Standard-B', 'fr-FR-Standard-C', 'fr-FR-Standard-D']):
            raise ValueError("must be one of enum values ('female/en-US', 'male/en-US', 'female/en-CA', 'female/en-AU', 'female/en-GB', 'male/en-GB', 'female/es-US', 'male/es-US', 'female/us-US', 'female/zh-CN', 'male/zh-CN', 'female/zh-HK', 'female/zh-TW', 'female/ja-JP', 'male/ja-JP', 'female/ko-KR', 'male/ko-KR', 'female/da-DK', 'female/de-DE', 'male/de-DE', 'female/ca-ES', 'female/es-ES', 'male/es-ES', 'female/fi-FI', 'female/fr-CA', 'male/fr-CA', 'female/fr-FR', 'male/fr-FR', 'female/it-IT', 'male/it-IT', 'female/nb-NO', 'female/nl-NL', 'female/pl-PL', 'female/pt-BR', 'female/pt-PT', 'male/pt-PT', 'female/ru-RU', 'male/ru-RU', 'female/sv-SE', 'female/hu-HU', 'female/cs-CZ', 'female/tr-TR', 'male/tr-TR', 'male/ru-RU/Vladimir', 'female/ru-RU/Julia', 'female/ru-RU/Anna', 'female/ru-RU/Viktoria', 'male/ru-RU/Alexander', 'female/ru-RU/Maria', 'female/ru-RU/Lidia', 'es-ES-Standard-A', 'it-IT-Standard-A', 'ja-JP-Standard-A', 'ko-KR-Standard-A', 'pt-BR-Standard-A', 'tr-TR-Standard-A', 'sv-SE-Standard-A', 'nl-NL-Standard-A', 'en-US-Wavenet-D', 'de-DE-Wavenet-A', 'de-DE-Wavenet-B', 'de-DE-Wavenet-C', 'de-DE-Wavenet-D', 'en-AU-Wavenet-A', 'en-AU-Wavenet-B', 'en-AU-Wavenet-C', 'en-AU-Wavenet-D', 'en-GB-Wavenet-A', 'en-GB-Wavenet-B', 'en-GB-Wavenet-C', 'en-GB-Wavenet-D', 'en-US-Wavenet-A', 'en-US-Wavenet-B', 'en-US-Wavenet-C', 'en-US-Wavenet-E', 'en-US-Wavenet-F', 'fr-FR-Wavenet-A', 'fr-FR-Wavenet-B', 'fr-FR-Wavenet-C', 'fr-FR-Wavenet-D', 'it-IT-Wavenet-A', 'ja-JP-Wavenet-A', 'nl-NL-Wavenet-A', 'en-GB-Standard-A', 'en-GB-Standard-B', 'en-GB-Standard-C', 'en-GB-Standard-D', 'en-US-Standard-B', 'en-US-Standard-C', 'en-US-Standard-D', 'en-US-Standard-E', 'de-DE-Standard-A', 'de-DE-Standard-B', 'en-AU-Standard-A', 'en-AU-Standard-B', 'en-AU-Standard-C', 'en-AU-Standard-D', 'fr-CA-Standard-A', 'fr-CA-Standard-B', 'fr-CA-Standard-C', 'fr-CA-Standard-D', 'fr-FR-Standard-A', 'fr-FR-Standard-B', 'fr-FR-Standard-C', 'fr-FR-Standard-D')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceTTS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceTTS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "voice": obj.get("voice")
        })
        return _obj


