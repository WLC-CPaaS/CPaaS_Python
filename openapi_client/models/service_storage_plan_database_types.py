# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_storage_plan_database_document import ServiceStoragePlanDatabaseDocument
from typing import Optional, Set
from typing_extensions import Self

class ServiceStoragePlanDatabaseTypes(BaseModel):
    """
    ServiceStoragePlanDatabaseTypes
    """ # noqa: E501
    call_recording: Optional[ServiceStoragePlanDatabaseDocument] = None
    fax: Optional[ServiceStoragePlanDatabaseDocument] = None
    function: Optional[ServiceStoragePlanDatabaseDocument] = None
    mailbox_message: Optional[ServiceStoragePlanDatabaseDocument] = None
    media: Optional[ServiceStoragePlanDatabaseDocument] = None
    __properties: ClassVar[List[str]] = ["call_recording", "fax", "function", "mailbox_message", "media"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceStoragePlanDatabaseTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_recording
        if self.call_recording:
            _dict['call_recording'] = self.call_recording.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fax
        if self.fax:
            _dict['fax'] = self.fax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function
        if self.function:
            _dict['function'] = self.function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mailbox_message
        if self.mailbox_message:
            _dict['mailbox_message'] = self.mailbox_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceStoragePlanDatabaseTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "call_recording": ServiceStoragePlanDatabaseDocument.from_dict(obj["call_recording"]) if obj.get("call_recording") is not None else None,
            "fax": ServiceStoragePlanDatabaseDocument.from_dict(obj["fax"]) if obj.get("fax") is not None else None,
            "function": ServiceStoragePlanDatabaseDocument.from_dict(obj["function"]) if obj.get("function") is not None else None,
            "mailbox_message": ServiceStoragePlanDatabaseDocument.from_dict(obj["mailbox_message"]) if obj.get("mailbox_message") is not None else None,
            "media": ServiceStoragePlanDatabaseDocument.from_dict(obj["media"]) if obj.get("media") is not None else None
        })
        return _obj


