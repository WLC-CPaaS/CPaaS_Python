# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceVOIPTemporalRuleAddEdit2(BaseModel):
    """
    ServiceVOIPTemporalRuleAddEdit2
    """ # noqa: E501
    cycle: StrictStr
    days: Optional[List[StrictInt]] = None
    enabled: Optional[StrictBool] = None
    interval: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    month: Optional[Annotated[int, Field(le=12, strict=True, ge=1)]] = None
    name: Annotated[str, Field(strict=True, max_length=128)]
    ordinal: Optional[StrictStr] = None
    start_date: Optional[StrictInt] = None
    start_date_req: Optional[StrictStr] = None
    time_window_start: Optional[Annotated[int, Field(le=86400, strict=True, ge=0)]] = None
    time_window_start_req: Optional[StrictStr] = None
    time_window_stop: Optional[Annotated[int, Field(le=86400, strict=True, ge=0)]] = None
    time_window_stop_req: Optional[StrictStr] = None
    wdays: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["cycle", "days", "enabled", "interval", "month", "name", "ordinal", "start_date", "start_date_req", "time_window_start", "time_window_start_req", "time_window_stop", "time_window_stop_req", "wdays"]

    @field_validator('cycle')
    def cycle_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['date', 'daily', 'weekly', 'monthly', 'yearly']):
            raise ValueError("must be one of enum values ('date', 'daily', 'weekly', 'monthly', 'yearly')")
        return value

    @field_validator('ordinal')
    def ordinal_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['every', 'first', 'second', 'third', 'fourth', 'fifth', 'last']):
            raise ValueError("must be one of enum values ('every', 'first', 'second', 'third', 'fourth', 'fifth', 'last')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceVOIPTemporalRuleAddEdit2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceVOIPTemporalRuleAddEdit2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cycle": obj.get("cycle"),
            "days": obj.get("days"),
            "enabled": obj.get("enabled"),
            "interval": obj.get("interval"),
            "month": obj.get("month"),
            "name": obj.get("name"),
            "ordinal": obj.get("ordinal"),
            "start_date": obj.get("start_date"),
            "start_date_req": obj.get("start_date_req"),
            "time_window_start": obj.get("time_window_start"),
            "time_window_start_req": obj.get("time_window_start_req"),
            "time_window_stop": obj.get("time_window_stop"),
            "time_window_stop_req": obj.get("time_window_stop_req"),
            "wdays": obj.get("wdays")
        })
        return _obj


