# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_system_status_cpaas_service import ServiceSystemStatusCPAASService
from openapi_client.models.service_system_status_messaging_service import ServiceSystemStatusMessagingService
from openapi_client.models.service_system_status_support_service import ServiceSystemStatusSupportService
from openapi_client.models.service_system_status_voip_service import ServiceSystemStatusVOIPService
from typing import Optional, Set
from typing_extensions import Self

class ServiceSystemStatusOutput(BaseModel):
    """
    ServiceSystemStatusOutput
    """ # noqa: E501
    cpaas_services: Optional[ServiceSystemStatusCPAASService] = None
    messaging_services: Optional[ServiceSystemStatusMessagingService] = None
    support_services: Optional[ServiceSystemStatusSupportService] = None
    voip_services: Optional[ServiceSystemStatusVOIPService] = None
    __properties: ClassVar[List[str]] = ["cpaas_services", "messaging_services", "support_services", "voip_services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceSystemStatusOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpaas_services
        if self.cpaas_services:
            _dict['cpaas_services'] = self.cpaas_services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messaging_services
        if self.messaging_services:
            _dict['messaging_services'] = self.messaging_services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support_services
        if self.support_services:
            _dict['support_services'] = self.support_services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voip_services
        if self.voip_services:
            _dict['voip_services'] = self.voip_services.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceSystemStatusOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpaas_services": ServiceSystemStatusCPAASService.from_dict(obj["cpaas_services"]) if obj.get("cpaas_services") is not None else None,
            "messaging_services": ServiceSystemStatusMessagingService.from_dict(obj["messaging_services"]) if obj.get("messaging_services") is not None else None,
            "support_services": ServiceSystemStatusSupportService.from_dict(obj["support_services"]) if obj.get("support_services") is not None else None,
            "voip_services": ServiceSystemStatusVOIPService.from_dict(obj["voip_services"]) if obj.get("voip_services") is not None else None
        })
        return _obj


