# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelsConfigFileParameter(BaseModel):
    """
    ModelsConfigFileParameter
    """ # noqa: E501
    extension: Optional[StrictStr] = None
    https_host: Optional[StrictStr] = None
    https_password: Optional[StrictStr] = None
    https_username: Optional[StrictStr] = None
    mac_address: Optional[StrictStr] = None
    realm: Optional[StrictStr] = None
    sip_password: Optional[StrictStr] = None
    sip_username: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    voicemail_box_number: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["extension", "https_host", "https_password", "https_username", "mac_address", "realm", "sip_password", "sip_username", "timezone", "voicemail_box_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsConfigFileParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsConfigFileParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "extension": obj.get("extension"),
            "https_host": obj.get("https_host"),
            "https_password": obj.get("https_password"),
            "https_username": obj.get("https_username"),
            "mac_address": obj.get("mac_address"),
            "realm": obj.get("realm"),
            "sip_password": obj.get("sip_password"),
            "sip_username": obj.get("sip_username"),
            "timezone": obj.get("timezone"),
            "voicemail_box_number": obj.get("voicemail_box_number")
        })
        return _obj


