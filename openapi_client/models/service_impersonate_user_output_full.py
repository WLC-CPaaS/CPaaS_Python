# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_impersonated_user_info import ServiceImpersonatedUserInfo
from typing import Optional, Set
from typing_extensions import Self

class ServiceImpersonateUserOutputFull(BaseModel):
    """
    ServiceImpersonateUserOutputFull
    """ # noqa: E501
    account_id: Optional[StrictStr] = None
    account_name: Optional[StrictStr] = None
    auth_token: Optional[StrictStr] = None
    cluster_id: Optional[StrictStr] = None
    is_master_account: Optional[StrictBool] = None
    is_reseller: Optional[StrictBool] = None
    owner_id: Optional[StrictStr] = None
    reseller_id: Optional[StrictStr] = None
    user_info: Optional[ServiceImpersonatedUserInfo] = None
    __properties: ClassVar[List[str]] = ["account_id", "account_name", "auth_token", "cluster_id", "is_master_account", "is_reseller", "owner_id", "reseller_id", "user_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceImpersonateUserOutputFull from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict['user_info'] = self.user_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceImpersonateUserOutputFull from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "auth_token": obj.get("auth_token"),
            "cluster_id": obj.get("cluster_id"),
            "is_master_account": obj.get("is_master_account"),
            "is_reseller": obj.get("is_reseller"),
            "owner_id": obj.get("owner_id"),
            "reseller_id": obj.get("reseller_id"),
            "user_info": ServiceImpersonatedUserInfo.from_dict(obj["user_info"]) if obj.get("user_info") is not None else None
        })
        return _obj


