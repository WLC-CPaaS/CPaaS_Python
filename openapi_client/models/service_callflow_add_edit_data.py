# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.service_callflow_add_edit_flow_data import ServiceCallflowAddEditFlowData
from openapi_client.models.service_feature_code import ServiceFeatureCode
from typing import Optional, Set
from typing_extensions import Self

class ServiceCallflowAddEditData(BaseModel):
    """
    ServiceCallflowAddEditData
    """ # noqa: E501
    featurecode: Optional[ServiceFeatureCode] = None
    flow: ServiceCallflowAddEditFlowData
    name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    numbers: List[StrictStr]
    patterns: List[StrictStr]
    __properties: ClassVar[List[str]] = ["featurecode", "flow", "name", "numbers", "patterns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceCallflowAddEditData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of featurecode
        if self.featurecode:
            _dict['featurecode'] = self.featurecode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flow
        if self.flow:
            _dict['flow'] = self.flow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceCallflowAddEditData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featurecode": ServiceFeatureCode.from_dict(obj["featurecode"]) if obj.get("featurecode") is not None else None,
            "flow": ServiceCallflowAddEditFlowData.from_dict(obj["flow"]) if obj.get("flow") is not None else None,
            "name": obj.get("name"),
            "numbers": obj.get("numbers"),
            "patterns": obj.get("patterns")
        })
        return _obj


