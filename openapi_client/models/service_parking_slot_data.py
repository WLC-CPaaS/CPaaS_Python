# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServiceParkingSlotData(BaseModel):
    """
    ServiceParkingSlotData
    """ # noqa: E501
    attended: Optional[StrictBool] = None
    call_id: Optional[StrictStr] = None
    cid_name: Optional[StrictStr] = None
    cid_number: Optional[StrictStr] = None
    cid_uri: Optional[StrictStr] = None
    from_tag: Optional[StrictStr] = None
    node: Optional[StrictStr] = None
    presence_id: Optional[StrictStr] = None
    presence_realm: Optional[StrictStr] = None
    presence_type: Optional[StrictStr] = None
    presence_user: Optional[StrictStr] = None
    ringback_id: Optional[StrictStr] = None
    slot_call_id: Optional[StrictStr] = None
    switch_uri: Optional[StrictStr] = None
    to_tag: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["attended", "call_id", "cid_name", "cid_number", "cid_uri", "from_tag", "node", "presence_id", "presence_realm", "presence_type", "presence_user", "ringback_id", "slot_call_id", "switch_uri", "to_tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceParkingSlotData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceParkingSlotData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attended": obj.get("attended"),
            "call_id": obj.get("call_id"),
            "cid_name": obj.get("cid_name"),
            "cid_number": obj.get("cid_number"),
            "cid_uri": obj.get("cid_uri"),
            "from_tag": obj.get("from_tag"),
            "node": obj.get("node"),
            "presence_id": obj.get("presence_id"),
            "presence_realm": obj.get("presence_realm"),
            "presence_type": obj.get("presence_type"),
            "presence_user": obj.get("presence_user"),
            "ringback_id": obj.get("ringback_id"),
            "slot_call_id": obj.get("slot_call_id"),
            "switch_uri": obj.get("switch_uri"),
            "to_tag": obj.get("to_tag")
        })
        return _obj


