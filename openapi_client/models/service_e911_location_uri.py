# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.service_e911_location_uri_legacy_data import ServiceE911LocationURILegacyData
from openapi_client.models.service_e911_location_uri_status import ServiceE911LocationURIStatus
from typing import Optional, Set
from typing_extensions import Self

class ServiceE911LocationURI(BaseModel):
    """
    ServiceE911LocationURI
    """ # noqa: E501
    activated_time: Optional[StrictStr] = Field(default=None, alias="activatedTime")
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    caller_name: Optional[StrictStr] = Field(default=None, alias="callerName")
    comments: Optional[StrictStr] = None
    community: Optional[StrictStr] = None
    customer_order_id: Optional[StrictStr] = Field(default=None, alias="customerOrderID")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    legacy_data: Optional[ServiceE911LocationURILegacyData] = Field(default=None, alias="legacyData")
    location_id: Optional[StrictStr] = Field(default=None, alias="locationID")
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    plus_four: Optional[StrictStr] = Field(default=None, alias="plusFour")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    state: Optional[StrictStr] = None
    status: Optional[ServiceE911LocationURIStatus] = None
    type: Optional[StrictStr] = None
    update_time: Optional[StrictStr] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["activatedTime", "address1", "address2", "callerName", "comments", "community", "customerOrderID", "latitude", "legacyData", "locationID", "longitude", "plusFour", "postalCode", "state", "status", "type", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceE911LocationURI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of legacy_data
        if self.legacy_data:
            _dict['legacyData'] = self.legacy_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceE911LocationURI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activatedTime": obj.get("activatedTime"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "callerName": obj.get("callerName"),
            "comments": obj.get("comments"),
            "community": obj.get("community"),
            "customerOrderID": obj.get("customerOrderID"),
            "latitude": obj.get("latitude"),
            "legacyData": ServiceE911LocationURILegacyData.from_dict(obj["legacyData"]) if obj.get("legacyData") is not None else None,
            "locationID": obj.get("locationID"),
            "longitude": obj.get("longitude"),
            "plusFour": obj.get("plusFour"),
            "postalCode": obj.get("postalCode"),
            "state": obj.get("state"),
            "status": ServiceE911LocationURIStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


