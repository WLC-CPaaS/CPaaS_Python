# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_voicemail_media import ServiceVoicemailMedia
from typing import Optional, Set
from typing_extensions import Self

class ServiceVoicemailOutputFull(BaseModel):
    """
    ServiceVoicemailOutputFull
    """ # noqa: E501
    id: Optional[StrictStr] = None
    mailbox: Optional[StrictStr] = None
    media: Optional[ServiceVoicemailMedia] = None
    media_extension: Optional[StrictStr] = None
    messages: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    pin: Optional[StrictStr] = None
    require_pin: Optional[StrictBool] = None
    timezone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "mailbox", "media", "media_extension", "messages", "name", "owner_id", "pin", "require_pin", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceVoicemailOutputFull from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceVoicemailOutputFull from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "mailbox": obj.get("mailbox"),
            "media": ServiceVoicemailMedia.from_dict(obj["media"]) if obj.get("media") is not None else None,
            "media_extension": obj.get("media_extension"),
            "messages": obj.get("messages"),
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "pin": obj.get("pin"),
            "require_pin": obj.get("require_pin"),
            "timezone": obj.get("timezone")
        })
        return _obj


