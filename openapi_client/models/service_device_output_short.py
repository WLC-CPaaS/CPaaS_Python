# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_call_recording_settings import ServiceCallRecordingSettings
from openapi_client.models.service_voip_shared_do_not_disturb import ServiceVOIPSharedDoNotDisturb
from typing import Optional, Set
from typing_extensions import Self

class ServiceDeviceOutputShort(BaseModel):
    """
    ServiceDeviceOutputShort
    """ # noqa: E501
    call_recording: Optional[ServiceCallRecordingSettings] = None
    device_type: Optional[StrictStr] = None
    do_not_disturb: Optional[ServiceVOIPSharedDoNotDisturb] = None
    enabled: Optional[StrictBool] = None
    features: Optional[List[StrictStr]] = None
    flags: Optional[List[StrictStr]] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["call_recording", "device_type", "do_not_disturb", "enabled", "features", "flags", "id", "name", "owner_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceDeviceOutputShort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_recording
        if self.call_recording:
            _dict['call_recording'] = self.call_recording.to_dict()
        # override the default output from pydantic by calling `to_dict()` of do_not_disturb
        if self.do_not_disturb:
            _dict['do_not_disturb'] = self.do_not_disturb.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceDeviceOutputShort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "call_recording": ServiceCallRecordingSettings.from_dict(obj["call_recording"]) if obj.get("call_recording") is not None else None,
            "device_type": obj.get("device_type"),
            "do_not_disturb": ServiceVOIPSharedDoNotDisturb.from_dict(obj["do_not_disturb"]) if obj.get("do_not_disturb") is not None else None,
            "enabled": obj.get("enabled"),
            "features": obj.get("features"),
            "flags": obj.get("flags"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "username": obj.get("username")
        })
        return _obj


