# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.models_call_recording_source import ModelsCallRecordingSource
from typing import Optional, Set
from typing_extensions import Self

class ModelsCallRecordingSettings(BaseModel):
    """
    ModelsCallRecordingSettings
    """ # noqa: E501
    any: Optional[ModelsCallRecordingSource] = None
    inbound: Optional[ModelsCallRecordingSource] = None
    outbound: Optional[ModelsCallRecordingSource] = None
    __properties: ClassVar[List[str]] = ["any", "inbound", "outbound"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsCallRecordingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of any
        if self.any:
            _dict['any'] = self.any.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inbound
        if self.inbound:
            _dict['inbound'] = self.inbound.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outbound
        if self.outbound:
            _dict['outbound'] = self.outbound.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsCallRecordingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "any": ModelsCallRecordingSource.from_dict(obj["any"]) if obj.get("any") is not None else None,
            "inbound": ModelsCallRecordingSource.from_dict(obj["inbound"]) if obj.get("inbound") is not None else None,
            "outbound": ModelsCallRecordingSource.from_dict(obj["outbound"]) if obj.get("outbound") is not None else None
        })
        return _obj


