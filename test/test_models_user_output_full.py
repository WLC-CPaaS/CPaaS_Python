# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.models_user_output_full import ModelsUserOutputFull

class TestModelsUserOutputFull(unittest.TestCase):
    """ModelsUserOutputFull unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelsUserOutputFull:
        """Test ModelsUserOutputFull
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelsUserOutputFull`
        """
        model = ModelsUserOutputFull()
        if include_optional:
            return ModelsUserOutputFull(
                call_forward = openapi_client.models.models/call_forward.models.CallForward(
                    enabled = True, 
                    number = '', ),
                call_recording = openapi_client.models.models/call_recording_settings.models.CallRecordingSettings(
                    any = openapi_client.models.models/call_recording_source.models.CallRecordingSource(
                        offnet = openapi_client.models.models/call_recording_parameters.models.CallRecordingParameters(
                            enabled = True, 
                            format = 'mp3', 
                            record_min_sec = 56, 
                            record_on_answer = True, 
                            record_on_bridge = True, 
                            record_sample_rate = 56, 
                            time_limit = 5, 
                            url = '', ), 
                        onnet = openapi_client.models.models/call_recording_parameters.models.CallRecordingParameters(
                            enabled = True, 
                            format = 'mp3', 
                            record_min_sec = 56, 
                            record_on_answer = True, 
                            record_on_bridge = True, 
                            record_sample_rate = 56, 
                            time_limit = 5, 
                            url = '', ), ), 
                    inbound = openapi_client.models.models/call_recording_source.models.CallRecordingSource(), 
                    outbound = , ),
                caller_id = openapi_client.models.models/user_output_full_callerid.models.UserOutputFullCallerid(
                    emergency = openapi_client.models.models/user_output_full_callerid_emergency.models.UserOutputFullCalleridEmergency(
                        number = '', ), 
                    external = openapi_client.models.models/user_output_full_callerid_external.models.UserOutputFullCalleridExternal(
                        number = '', ), 
                    internal = openapi_client.models.models/user_output_full_callerid_internal.models.UserOutputFullCalleridInternal(
                        number = '', ), ),
                do_not_disturb = openapi_client.models.models/voip_shared_do_not_disturb.models.VOIPSharedDoNotDisturb(
                    enabled = True, ),
                email = '',
                enabled = True,
                first_name = '',
                id = '',
                last_name = '',
                music_on_hold = openapi_client.models.models/music_on_hold.models.MusicOnHold(
                    media_id = '', ),
                presence_id = '',
                timezone = '',
                verified = True
            )
        else:
            return ModelsUserOutputFull(
        )
        """

    def testModelsUserOutputFull(self):
        """Test ModelsUserOutputFull"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
