# coding: utf-8

"""
    White Label Communications CPaas API Documentation

    A CPaaS platform API

    The version of the OpenAPI document: 1.1
    Contact: support@whitelabelcomm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_device_output_full import ServiceDeviceOutputFull

class TestServiceDeviceOutputFull(unittest.TestCase):
    """ServiceDeviceOutputFull unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceDeviceOutputFull:
        """Test ServiceDeviceOutputFull
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceDeviceOutputFull`
        """
        model = ServiceDeviceOutputFull()
        if include_optional:
            return ServiceDeviceOutputFull(
                call_forward = openapi_client.models.service/call_forward.service.CallForward(
                    enabled = True, 
                    number = '', ),
                call_recording = openapi_client.models.service/call_recording_settings.service.CallRecordingSettings(
                    any = openapi_client.models.service/call_recording_source.service.CallRecordingSource(
                        offnet = openapi_client.models.service/call_recording_parameters.service.CallRecordingParameters(
                            enabled = True, 
                            format = 'mp3', 
                            record_min_sec = 56, 
                            record_on_answer = True, 
                            record_on_bridge = True, 
                            record_sample_rate = 56, 
                            time_limit = 5, 
                            url = '', ), 
                        onnet = openapi_client.models.service/call_recording_parameters.service.CallRecordingParameters(
                            enabled = True, 
                            format = 'mp3', 
                            record_min_sec = 56, 
                            record_on_answer = True, 
                            record_on_bridge = True, 
                            record_sample_rate = 56, 
                            time_limit = 5, 
                            url = '', ), ), 
                    inbound = openapi_client.models.service/call_recording_source.service.CallRecordingSource(), 
                    outbound = , ),
                caller_id = openapi_client.models.service/device_output_full_callerid.service.DeviceOutputFullCallerid(
                    emergency = openapi_client.models.service/device_output_full_callerid_emergency.service.DeviceOutputFullCalleridEmergency(
                        number = '', ), 
                    external = openapi_client.models.service/device_output_full_callerid_external.service.DeviceOutputFullCalleridExternal(
                        number = '', ), ),
                device_type = '',
                do_not_disturb = openapi_client.models.service/voip_shared_do_not_disturb.service.VOIPSharedDoNotDisturb(
                    enabled = True, ),
                enabled = True,
                id = '',
                mac_address = '',
                music_on_hold = openapi_client.models.service/music_on_hold.service.MusicOnHold(
                    media_id = '', ),
                name = '',
                owner_id = '',
                sip = openapi_client.models.service/device_output_full_sip.service.DeviceOutputFullSIP(
                    invite_format = '', 
                    password = '', 
                    username = '', )
            )
        else:
            return ServiceDeviceOutputFull(
        )
        """

    def testServiceDeviceOutputFull(self):
        """Test ServiceDeviceOutputFull"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
